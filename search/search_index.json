{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A Python package for the Transport for London (TFL) API.</p> <p>The TFL API is a RESTful API that provides data related to all modes of transport in London, including cycle hire, buses, roads, and the underground. Anonymous access to the TFL API is limited to 50 requests a minute. If you want to call the API more than that, you'll need to subscribe to a \"Product\" which lets you bypass this limit with a subscription-key that you append to your requests.</p> <p>Currently, we support the following APIs:</p> <ul> <li>Accident Stats API</li> <li>Air Quality API</li> <li>Crowding API</li> <li>Lift Disruptions API</li> </ul> <p>The plan is to add support for all the TFL APIs. Contributions are welcome!</p>"},{"location":"#installation","title":"\ud83e\udef6 Installation","text":"<pre><code>pip install py-tfl\n</code></pre> <p>or install with Poetry:</p> <pre><code>poetry add py-tfl\n</code></pre>"},{"location":"#quickstart","title":"\u26a1\ufe0fQuickstart","text":""},{"location":"#cli","title":"\u2328\ufe0f CLI","text":"<p>The TFL CLI provides a command line interface to the TFL API. It is built on top of Typer, which provides easy way to build command line interfaces.</p> <pre><code>tfl --help\n</code></pre>"},{"location":"#client","title":"\ud83e\udd8b Client","text":"<p>The TFL client provides a Python interface to the TFL API. It provides a Pythonic interface to the API, and handles authentication and rate limiting for you. The client is built on top of HTTPX, which provides a fast, async HTTP client.</p> <pre><code>from tfl import clients\nasync with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await client.handlers.lift_disruptions_v2_handler.get_lift_disruptions()\nprint(response.json())\n</code></pre>"},{"location":"#releases","title":"\ud83d\udcc8 Releases","text":"<p>You can see the list of available releases on the GitHub Releases page.</p> <p>We follow Semantic Versions specification.</p> <p>We use <code>Release Drafter</code>. As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you\u2019re ready. With the categories option, you can categorize pull requests in release notes using labels.</p>"},{"location":"#license","title":"\ud83d\udee1 License","text":"<p>This project is licensed under the terms of the <code>MIT</code> license. See LICENSE for more details.</p>"},{"location":"#credits","title":"\ud83d\ude80 Credits","text":"<p>A special thanks to HTTPX, Typer, and the TFL API team for making this project possible.</p> <p>This project was built using IntelliJ IDEA.</p> <p></p>"},{"location":"cli/","title":"CLI reference","text":""},{"location":"cli/#introduction","title":"\ud83d\udcd6 Introduction","text":"<p>The TFL CLI provides a command line interface to the TFL API. It is built on top of Typer, which provides easy way to build command line interfaces. The TFL CLI is bundled with the TFL package. Once installed, you can use the CLI to access the TFL API.</p>"},{"location":"cli/#usage","title":"\u2705 Usage","text":"<p>The TFL CLI is available as <code>tfl</code> after installation. You can see the available commands and options by running <code>tfl --help</code>:</p> <pre><code> Usage: tfl [OPTIONS] COMMAND [ARGS]...\n\n tfl: A Python package for the Transport for London (TFL) API.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version                     Show the version and exit.                                   \u2502\n\u2502 --install-completion          Install completion for the current shell.                    \u2502\n\u2502 --show-completion             Show completion for the current shell, to copy it or         \u2502\n\u2502                               customize the installation.                                  \u2502\n\u2502 --help                        Show this message and exit.                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 accident-stats    Gets all accident details for accidents occurring in the specified year. \u2502\n\u2502 air-quality       Get air quality data feed.                                               \u2502\n\u2502 crowding          Information about crowding levels within TFL stations.                   \u2502\n\u2502 lift-disruptions  Get current lift disruptions.                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You can also see the available options and arguments for a specific command by running <code>tfl &lt;command&gt; --help</code>. For example:</p> <pre><code>tfl lift-disruptions --help\n</code></pre> <p>which will output:</p> <pre><code> Usage: tfl lift-disruptions [OPTIONS] [KEY]\n\n Get current lift disruptions.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   key      [KEY]  TFL API key. [env var: TFL_API_KEY] [default: None]                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/#authentication","title":"\ud83d\udd11 Authentication","text":"<p>Anonymous access to the TFL API is limited to 50 requests a minute. You can register for an API key via the TFL API website. Once you have an API key, you can export it as an environment variable:</p> <pre><code>export TFL_API_KEY=&lt;your-api-key&gt;\n</code></pre>"},{"location":"cli/#examples","title":"\ud83d\udcda Examples","text":"<p>Please note that the below outputs are examples, and the actual output may differ.</p>"},{"location":"cli/#air-quality","title":"\u2601\ufe0f Air quality","text":"<p>Get the current TFL air quality, run: <pre><code>tfl air-quality\n</code></pre></p> <p>which will output:</p> <pre><code>                              Today's Air Quality\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                       \u2503                                                      \u2503\n\u2503 Air Pollution Banding \u2503 Summary                                              \u2503\n\u2503                       \u2503                                                      \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502                       \u2502                                                      \u2502\n\u2502 Low                   \u2502 Low air pollution forecast valid from Tuesday 9 May  \u2502\n\u2502                       \u2502 to end of Thursday 11 May GMT                        \u2502\n\u2502                       \u2502                                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nThis forecast is intended to provide information on expected pollution levels in\nareas of significant public exposure. It may not apply in very specific\nlocations close to unusually strong or short-lived local sources of pollution.\n\nFor more information, please visit: http://londonair.org.uk/forecast\n</code></pre>"},{"location":"cli/#lift-disruptions","title":"\ud83d\uded7 Lift disruptions","text":"<p>Get the current TFL lift disruptions, run: <pre><code>tfl lift-disruptions\n</code></pre></p> <p>which will output:</p> <pre><code>                              Lift Disruptions\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                             \u2503                                             \u2503\n\u2503 Station                     \u2503 Message                                     \u2503\n\u2503                             \u2503                                             \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502                             \u2502                                             \u2502\n\u2502 Caledonian Road &amp; Barnsbury \u2502 Step free access is not available due to a  \u2502\n\u2502                             \u2502 faulty lift. Call us on 0343 222 1234 if    \u2502\n\u2502                             \u2502 you need help planning your journey.        \u2502\n\u2502                             \u2502                                             \u2502\n\u2502                             \u2502                                             \u2502\n\u2502 Denmark Hill                \u2502 Step free access is not available to the    \u2502\n\u2502                             \u2502 northbound platform due to a faulty lift.   \u2502\n\u2502                             \u2502 Call us on 0343 222 1234 if you need help   \u2502\n\u2502                             \u2502 planning your journey.                      \u2502\n\u2502                             \u2502                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        Current TFL lift disruptions.\n</code></pre>"},{"location":"contributing/","title":"How to contribute","text":"<p>We welcome contributions to this project. There are many ways to contribute, from writing new features, to reporting bugs.</p> <p>Please use GitHub issues to report all bugs. You can also use the issues to ask questions, or request new features.</p> <p>We use pull requests for all contributions. If you are not familiar with GitHub pull requests, please read \"Creating a pull request\" on GitHub's website for more information.</p>"},{"location":"contributing/#contributing-code","title":"Contributing code","text":"<p>Check the Makefile for useful commands to help you get started.</p>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>We use Poetry to manage dependencies. Please install Poetry before contributing code. We also utilise pre-commit to manage pre-commit hooks. Please install pre-commit before contributing code.</p> <p>You can install all dependencies by running <code>poetry install</code> in the root directory of this project.</p>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>We use black to format our code as well as ruff to lint our code. Please run <code>pre-commit run --all-files</code> before submitting a pull request to ensure your code is formatted correctly and passes all linting checks.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We use pytest to test our code. Please write tests for all new code you write. You can run all tests by running <code>make test</code> in the root directory of this project.</p>"},{"location":"contributing/#contributing-to-documentation","title":"Contributing to documentation","text":"<p>We welcome contributions to our documentation. You can find the documentation in the <code>docs</code> directory. We use mkdocs to build our documentation. You can run <code>mkdocs serve</code> in the root directory of this project to serve the documentation locally.</p>"},{"location":"contributing/#before-submitting-a-pull-request","title":"Before submitting a pull request","text":"<p>Before submitting a pull request, please ensure that you have run <code>pre-commit run --all-files</code>, <code>pytest</code>, amd <code>mypy</code> to ensure your code is formatted correctly, passes all linting checks, and passes all tests.</p> <p>Please ensure you follow these steps:</p> <ol> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"contributing/#help","title":"Help","text":"<p>The Makefile contains some useful commands to help you get started. You can run <code>make help</code> to see a list of all available commands.</p> <p>If you need help, please feel free to reach out to us!</p>"},{"location":"enums/","title":"Enums","text":"<p>Enums for TFL API.</p>"},{"location":"enums/#tfl.enums.DayOfWeekEnum","title":"<code>DayOfWeekEnum</code>","text":"<p>         Bases: <code>str</code>, <code>enum.Enum</code></p> <p>Day of week enum.</p> <p>Attributes:</p> Name Type Description <code>MONDAY</code> <code>str</code> <p>Monday.</p> <code>TUESDAY</code> <code>str</code> <p>Tuesday.</p> <code>WEDNESDAY</code> <code>str</code> <p>Wednesday.</p> <code>THURSDAY</code> <code>str</code> <p>Thursday.</p> <code>FRIDAY</code> <code>str</code> <p>Friday.</p> <code>SATURDAY</code> <code>str</code> <p>Saturday.</p> <code>SUNDAY</code> <code>str</code> <p>Sunday.</p> <code>LIVE</code> <code>str</code> <p>Live - Access to live data.</p> Source code in <code>tfl/enums.py</code> <pre><code>class DayOfWeekEnum(str, enum.Enum):\n\"\"\"Day of week enum.\n    Attributes:\n        MONDAY (str): Monday.\n        TUESDAY (str): Tuesday.\n        WEDNESDAY (str): Wednesday.\n        THURSDAY (str): Thursday.\n        FRIDAY (str): Friday.\n        SATURDAY (str): Saturday.\n        SUNDAY (str): Sunday.\n        LIVE (str): Live - Access to live data.\n    \"\"\"\nMONDAY = \"Mon\"\nTUESDAY = \"Tue\"\nWEDNESDAY = \"Wed\"\nTHURSDAY = \"Thu\"\nFRIDAY = \"Fri\"\nSATURDAY = \"Sat\"\nSUNDAY = \"Sun\"\nLIVE = \"Live\"\n</code></pre>"},{"location":"help/","title":"Help","text":"<p>Do you like tfl?</p> <p>Would you like to help tfl, other users, and the author?</p> <p>Or would you like to get help with tfl?</p> <p>There are very simple ways to help (several involve just one or two clicks).</p> <p>And there are several ways to get help too.</p>"},{"location":"help/#star-tfl-on-github","title":"Star tfl on GitHub","text":"<p>You can \"star\" tfl on GitHub (clicking the star button at the top right) \u2b50\ufe0f</p> <p>By adding a star, other users will be able to find it more easily and see that it has been already useful for others.</p>"},{"location":"help/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases","text":"<p>You can \"watch\" tfl in GitHub (clicking the \"watch\" button at the top right) \ud83d\udc40</p> <p>There you can select \"Releases only\".</p> <p>By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of tfl with bug fixes and new features.</p>"},{"location":"help/#connect-with-the-author","title":"Connect with the author","text":"<p>You can connect with me, Cellan Hall, the author.</p> <p>You can:</p> <ul> <li>Follow me on GitHub.<ul> <li>See other Open Source projects I have created that could help you.</li> <li>Follow me to see when I create a new Open Source project.</li> </ul> </li> <li>Follow me on Twitter.<ul> <li>Tell me how you use tfl.</li> </ul> </li> <li>Follow me on LinkedIn.<ul> <li>Hear when I make announcements or release new tools.</li> </ul> </li> </ul>"},{"location":"help/#create-a-pull-request","title":"Create a Pull Request","text":"<p>You can contribute to the source code with pull requests.</p> <p>Thanks! \ud83d\ude80</p>"},{"location":"base/base_handler/","title":"Base Handler","text":"<p>A base class for all tfl handlers.</p>"},{"location":"base/base_handler/#tfl.base._base_handler.TFLHandler","title":"<code>TFLHandler</code>","text":"<p>         Bases: <code>abc.ABC</code></p> <p>A base class for all tfl handlers.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>httpx.AsyncClient</code> <p>The client to use when sending requests.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client does not have a base URL of https://api.tfl.gov.uk.</p> Source code in <code>tfl/base/_base_handler.py</code> <pre><code>class TFLHandler(abc.ABC):\n\"\"\"A base class for all tfl handlers.\n    Args:\n        client: The client to use when sending requests.\n    Raises:\n        ValueError: If the client does not have a base URL of https://api.tfl.gov.uk.\n    \"\"\"\ndef __init__(self, client: httpx.AsyncClient) -&gt; None:\nif client.base_url != \"https://api.tfl.gov.uk\":\nraise ValueError(\"The client must have a base URL of https://api.tfl.gov.uk\")\nself.client = client\n</code></pre>"},{"location":"clients/auth/","title":"Authentication","text":"<p>This module contains objects for authenticating with the TFL API.</p> <p>Using the <code>Auth</code> class, you can authenticate with the TFL API using your API key. When a request is sent, the API key will be added to the request URL.</p> <p>You can register for an API key via the TFL API website. An API key is not required to use the TFL API. However, without registering for an API key, you will be limited to 50 requests per hour. If an invalid API key is provided an error by the TFL API will be returned.</p>"},{"location":"clients/auth/#tfl.clients._auth.Auth","title":"<code>Auth</code>","text":"<p>         Bases: <code>httpx.Auth</code></p> <p>The authentication class for Transport for London API.</p> <p>Using the <code>Auth</code> class, you can authenticate with the TFL API using your API key. When a request is sent, the API key will be added to the request URL.</p> Example <pre><code>from tfl import clients\nasync with clients.LiftDisruptionsV2Client(auth=clients.Auth(\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await client.get_lift_disruptions()\nprint(response.json())\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The TFL API key.</p> required Source code in <code>tfl/clients/_auth.py</code> <pre><code>class Auth(httpx.Auth):\n\"\"\"The authentication class for Transport for London API.\n    Using the `Auth` class, you can authenticate with the TFL API using your API key. When a request is sent, the API\n    key will be added to the request URL.\n    Example:\n        ```python\n        from tfl import clients\n        async with clients.LiftDisruptionsV2Client(auth=clients.Auth(\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await client.get_lift_disruptions()\n        print(response.json())\n        ```\n    Args:\n        key: The TFL API key.\n    \"\"\"\ndef __init__(self, key: str) -&gt; None:\nself.key = key\ndef auth_flow(self, request: httpx.Request) -&gt; Generator[httpx.Request, Any, None]:\n\"\"\"Add the API key to the request.\n        The key will be added to the request URL as a query parameter.\n        Args:\n            request: The request to be sent.\n        Returns:\n            The request with the API key added to the URL.\n        \"\"\"\nrequest.url = request.url.copy_add_param(key=\"app_key\", value=self.key)\nyield request\n</code></pre>"},{"location":"clients/auth/#tfl.clients._auth.Auth.auth_flow","title":"<code>auth_flow(request)</code>","text":"<p>Add the API key to the request.</p> <p>The key will be added to the request URL as a query parameter.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>httpx.Request</code> <p>The request to be sent.</p> required <p>Returns:</p> Type Description <code>Generator[httpx.Request, Any, None]</code> <p>The request with the API key added to the URL.</p> Source code in <code>tfl/clients/_auth.py</code> <pre><code>def auth_flow(self, request: httpx.Request) -&gt; Generator[httpx.Request, Any, None]:\n\"\"\"Add the API key to the request.\n    The key will be added to the request URL as a query parameter.\n    Args:\n        request: The request to be sent.\n    Returns:\n        The request with the API key added to the URL.\n    \"\"\"\nrequest.url = request.url.copy_add_param(key=\"app_key\", value=self.key)\nyield request\n</code></pre>"},{"location":"clients/tfl_client/","title":"TFL Client","text":"<p>A client to interact with the TFL API.</p> <p>The <code>TFLClient</code> class is a subclass of httpx.AsyncClient that is used to interact with the TFL API. Using the <code>TFLClient</code> class, you can send requests to the TFL API.</p> <p>The <code>TFLClient</code> allows for the <code>Auth</code> class to be passed in as an argument. This will add the API key to the request URL as a query parameter. If no <code>Auth</code> class is passed in, the request will be sent without an API key. This will result in a rate limit of 50 requests per hour.</p> <p>Also, the <code>base_url</code> is set to the TFL API base URL. This means that when a request is sent, the URL will be appended to the base URL. For example, if the <code>base_url</code> is set to <code>https://api.tfl.gov.uk/</code>, and the request URL is set to <code>Disruptions/Lifts/v2</code>, the request URL will be <code>https://api.tfl.gov.uk/Disruptions/Lifts/v2</code>.</p> <p>Using the <code>TFLClient</code>, you can access all of TFL API through handlers. For example, to access the Lift Disruptions V2 API, you can use the <code>LiftDisruptionsV2Handler</code>:</p> <pre><code>from tfl import clients\nasync with clients.TFLClient() as client:\nresponse = await client.handlers.lift_disruptions_v2_handler.get_lift_disruptions()\nprint(response.json())\n</code></pre> <p>Check out Handlers for more information on the available handlers.</p>"},{"location":"clients/tfl_client/#tfl.clients._client.TFLClient","title":"<code>TFLClient</code>","text":"<p>         Bases: <code>httpx.AsyncClient</code></p> <p>Client to interact with the TFL API.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>Optional[Auth]</code> <p>TFL authentication class to use when sending requests.</p> <code>None</code> <code>params</code> <code>Optional[QueryParamTypes]</code> <p>Query parameters to include in request URLs, as a string, dictionary, or sequence of two-tuples.</p> <code>None</code> <code>headers</code> <code>Optional[HeaderTypes]</code> <p>Dictionary of HTTP headers to include when sending requests.</p> <code>None</code> <code>cookies</code> <code>Optional[CookieTypes]</code> <p>Dictionary of Cookie items to include when sending requests.</p> <code>None</code> <code>verify</code> <code>VerifyTypes</code> <p>SSL certificates (a.k.a CA bundle) used to verify the identity of requested hosts. Either <code>True</code> (default CA bundle), a path to an SSL certificate file, an <code>ssl.SSLContext</code>, or <code>False</code> (which will disable  verification).</p> <code>True</code> <code>cert</code> <code>Optional[CertTypes]</code> <p>An SSL certificate used by the requested host to authenticate the client. Either a path to an SSL certificate file, or two-tuple of (certificate file, key file), or a three-tuple of (certificate file, key file, password).</p> <code>None</code> <code>proxies</code> <code>Optional[ProxiesTypes]</code> <p>A dictionary mapping proxy keys to proxy URLs.</p> <code>None</code> <code>timeout</code> <code>TimeoutTypes</code> <p>The timeout configuration to use when sending requests.</p> <code>DEFAULT_TIMEOUT_CONFIG</code> <code>limits</code> <code>Limits</code> <p>The limits configuration to use.</p> <code>DEFAULT_LIMITS</code> <code>max_redirects</code> <code>int</code> <p>The maximum number of redirect responses that should be followed.</p> <code>DEFAULT_MAX_REDIRECTS</code> <code>transport</code> <code>Optional[AsyncBaseTransport]</code> <p>A transport class to use for sending requests over the network.</p> <code>None</code> <code>app</code> <code>Optional[Callable[..., Any]]</code> <p>An WSGI application to send requests to, rather than sending actual network requests.</p> <code>None</code> <code>trust_env</code> <code>bool</code> <p>Enables or disables usage of environment variables for configuration.</p> <code>True</code> <code>default_encoding</code> <code>Union[str, Callable[[bytes], str]]</code> <p>The default encoding to use for decoding response text, if no charset information is included in a response Content-Type header. Set to a callable for automatic character set detection. Default: \"utf-8\".</p> <code>'utf-8'</code> Example <pre><code>from tfl.clients import Auth\nasync with TFLClient(auth=Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await client.handlers.lift_disruptions_v2_handler.get_lift_disruptions()\nprint(response.json())\n</code></pre> Source code in <code>tfl/clients/_client.py</code> <pre><code>class TFLClient(httpx.AsyncClient):\n\"\"\"Client to interact with the TFL API.\n    Args:\n        auth: TFL authentication class to use when sending requests.\n        params: Query parameters to include in request URLs, as a string, dictionary, or sequence of two-tuples.\n        headers: Dictionary of HTTP headers to include when sending requests.\n        cookies: Dictionary of Cookie items to include when sending requests.\n        verify: SSL certificates (a.k.a CA bundle) used to verify the identity of requested hosts. Either `True`\n            (default CA bundle), a path to an SSL certificate file, an `ssl.SSLContext`, or `False` (which will disable\n             verification).\n        cert: An SSL certificate used by the requested host to authenticate the client. Either a path to an SSL\n            certificate file, or two-tuple of (certificate file, key file), or a three-tuple of (certificate file, key\n            file, password).\n        proxies: A dictionary mapping proxy keys to proxy URLs.\n        timeout: The timeout configuration to use when sending requests.\n        limits: The limits configuration to use.\n        max_redirects: The maximum number of redirect responses that should be followed.\n        transport: A transport class to use for sending requests over the network.\n        app:An WSGI application to send requests to, rather than sending actual network requests.\n        trust_env: Enables or disables usage of environment variables for configuration.\n        default_encoding: The default encoding to use for decoding response text, if no charset information is included\n            in a response Content-Type header. Set to a callable for automatic character set detection. Default:\n            \"utf-8\".\n    Example:\n        ```python\n        from tfl.clients import Auth\n        async with TFLClient(auth=Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await client.handlers.lift_disruptions_v2_handler.get_lift_disruptions()\n        print(response.json())\n        ```\n    \"\"\"\ndef __init__(\nself,\n*,\nauth: Optional[Auth] = None,\nparams: Optional[QueryParamTypes] = None,\nheaders: Optional[HeaderTypes] = None,\ncookies: Optional[CookieTypes] = None,\nverify: VerifyTypes = True,\ncert: Optional[CertTypes] = None,\nhttp1: bool = True,\nhttp2: bool = False,\nproxies: Optional[ProxiesTypes] = None,\nmounts: Optional[Mapping[str, AsyncBaseTransport]] = None,\ntimeout: TimeoutTypes = DEFAULT_TIMEOUT_CONFIG,\nfollow_redirects: bool = False,\nlimits: Limits = DEFAULT_LIMITS,\nmax_redirects: int = DEFAULT_MAX_REDIRECTS,\nevent_hooks: Optional[Mapping[str, List[Callable[..., Any]]]] = None,\ntransport: Optional[AsyncBaseTransport] = None,\napp: Optional[Callable[..., Any]] = None,\ntrust_env: bool = True,\ndefault_encoding: Union[str, Callable[[bytes], str]] = \"utf-8\",\n) -&gt; None:\nsuper().__init__(\nauth=auth,\nparams=params,\nheaders=headers,\ncookies=cookies,\ntimeout=timeout,\nfollow_redirects=follow_redirects,\nmax_redirects=max_redirects,\nevent_hooks=event_hooks,\nbase_url=\"https://api.tfl.gov.uk\",\ntrust_env=trust_env,\ndefault_encoding=default_encoding,\nverify=verify,\ncert=cert,\nhttp1=http1,\nhttp2=http2,\nproxies=proxies,\nmounts=mounts,\nlimits=limits,\ntransport=transport,\napp=app,\n)\nself.handlers = TFLHandlers(self)\n</code></pre>"},{"location":"clients/handlers/accident_stats_handler/","title":"Accident Stats Handler","text":"<p>Handler to interact with the accident stats API.</p>"},{"location":"clients/handlers/accident_stats_handler/#tfl.clients.handlers._accident_stats_handler.AccidentStatsHandler","title":"<code>AccidentStatsHandler</code>","text":"<p>         Bases: <code>base.TFLHandler</code></p> <p>Handler to interact with the accident stats API.</p> <p>API reference</p> <p>As it stands, the API does not include data between 2020 and 2023.</p> Example <pre><code>from tfl import clients\nasync with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await AccidentStatsHandler(client).get_accident_stats()\nprint(response.json())\n</code></pre> Source code in <code>tfl/clients/handlers/_accident_stats_handler.py</code> <pre><code>class AccidentStatsHandler(base.TFLHandler):\n\"\"\"Handler to interact with the accident stats API.\n    [API reference](https://api-portal.tfl.gov.uk/api-details#api=AccidentStats&amp;operation=AccidentStats_Get)\n    As it stands, the API does not include data between 2020 and 2023.\n    Example:\n        ```python\n        from tfl import clients\n        async with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await AccidentStatsHandler(client).get_accident_stats()\n        print(response.json())\n        ```\n    \"\"\"\nasync def get_accident_stats(self, year: int) -&gt; httpx.Response:\n\"\"\"Gets all accident details for accidents occurring in the specified year.\n        Returns:\n            The response from the API.\n        \"\"\"\nreturn await self.client.get(url=f\"/AccidentStats/{year}\")\n</code></pre>"},{"location":"clients/handlers/accident_stats_handler/#tfl.clients.handlers._accident_stats_handler.AccidentStatsHandler.get_accident_stats","title":"<code>get_accident_stats(year)</code>  <code>async</code>","text":"<p>Gets all accident details for accidents occurring in the specified year.</p> <p>Returns:</p> Type Description <code>httpx.Response</code> <p>The response from the API.</p> Source code in <code>tfl/clients/handlers/_accident_stats_handler.py</code> <pre><code>async def get_accident_stats(self, year: int) -&gt; httpx.Response:\n\"\"\"Gets all accident details for accidents occurring in the specified year.\n    Returns:\n        The response from the API.\n    \"\"\"\nreturn await self.client.get(url=f\"/AccidentStats/{year}\")\n</code></pre>"},{"location":"clients/handlers/air_quality_handler/","title":"Air Quality Handler","text":"<p>Handler to interact with the air quality API.</p>"},{"location":"clients/handlers/air_quality_handler/#tfl.clients.handlers._air_quality_handler.AirQualityHandler","title":"<code>AirQualityHandler</code>","text":"<p>         Bases: <code>base.TFLHandler</code></p> <p>Handler to interact with the air quality API.</p> <p>API reference</p> Example <pre><code>from tfl import clients\nasync with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await AirQualityHandler(client).get_air_quality()\nprint(response.json())\n</code></pre> Source code in <code>tfl/clients/handlers/_air_quality_handler.py</code> <pre><code>class AirQualityHandler(base.TFLHandler):\n\"\"\"Handler to interact with the air quality API.\n    [API reference](https://api-portal.tfl.gov.uk/api-details#api=AirQuality&amp;operation=AirQuality_Get)\n    Example:\n        ```python\n        from tfl import clients\n        async with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await AirQualityHandler(client).get_air_quality()\n        print(response.json())\n        ```\n    \"\"\"\nasync def get_air_quality(self) -&gt; httpx.Response:\n\"\"\"Gets current air quality data feed.\n        Returns:\n            The response from the API.\n        \"\"\"\nreturn await self.client.get(url=f\"/AirQuality\")\n</code></pre>"},{"location":"clients/handlers/air_quality_handler/#tfl.clients.handlers._air_quality_handler.AirQualityHandler.get_air_quality","title":"<code>get_air_quality()</code>  <code>async</code>","text":"<p>Gets current air quality data feed.</p> <p>Returns:</p> Type Description <code>httpx.Response</code> <p>The response from the API.</p> Source code in <code>tfl/clients/handlers/_air_quality_handler.py</code> <pre><code>async def get_air_quality(self) -&gt; httpx.Response:\n\"\"\"Gets current air quality data feed.\n    Returns:\n        The response from the API.\n    \"\"\"\nreturn await self.client.get(url=f\"/AirQuality\")\n</code></pre>"},{"location":"clients/handlers/client_handlers/","title":"TFL Handlers","text":"<p>Handlers for the TFL API.</p> <p>The <code>TFLHandlers</code> class is used to store all handlers. Using the <code>TFLHandlers</code> class, you can access all the TFL API when using the <code>TFLClient</code> class.</p>"},{"location":"clients/handlers/client_handlers/#tfl.clients.handlers._client_handlers.TFLHandlers","title":"<code>TFLHandlers</code>","text":"<p>A class to store all handlers.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>httpx.AsyncClient</code> <p>The TFL client to use when sending requests.</p> required Source code in <code>tfl/clients/handlers/_client_handlers.py</code> <pre><code>class TFLHandlers:\n\"\"\"A class to store all handlers.\n    Args:\n        client: The TFL client to use when sending requests.\n    \"\"\"\ndef __init__(self, client: httpx.AsyncClient) -&gt; None:\nself.lift_disruptions_v2_handler = LiftDisruptionsV2Handler(client)\nself.crowding_handler = CrowdingHandler(client)\nself.air_quality_handler = AirQualityHandler(client)\nself.accident_stats_handler = AccidentStatsHandler(client)\n</code></pre>"},{"location":"clients/handlers/crowding_handler/","title":"Crowding Handler","text":"<p>Handler to interact with the crowding API.</p>"},{"location":"clients/handlers/crowding_handler/#tfl.clients.handlers._crowding_handler.CrowdingHandler","title":"<code>CrowdingHandler</code>","text":"<p>         Bases: <code>base.TFLHandler</code></p> <p>Handler to interact with the Crowding API.</p> <p>API reference</p> Example <pre><code>from tfl import clients, enums\nasync with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await CrowdingHandler(client).get_crowding(\nnaptan_code=\"940GZZLUBND\", day=enums.DayOfWeekEnum.MONDAY\n)\nprint(response.json())\n</code></pre> Source code in <code>tfl/clients/handlers/_crowding_handler.py</code> <pre><code>class CrowdingHandler(base.TFLHandler):\n\"\"\"Handler to interact with the Crowding API.\n    [API reference](https://api-portal.tfl.gov.uk/api-details#api=crowding&amp;operation=dayofweek)\n    Example:\n        ```python\n        from tfl import clients, enums\n        async with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await CrowdingHandler(client).get_crowding(\n                naptan_code=\"940GZZLUBND\", day=enums.DayOfWeekEnum.MONDAY\n            )\n        print(response.json())\n        ```\n    \"\"\"\nasync def get_crowding(self, naptan_code: str, day: Optional[enums.DayOfWeekEnum] = None) -&gt; httpx.Response:\n\"\"\"Get information about crowding levels within TFL stations.\n        Args:\n            naptan_code: The NAPTAN code of the station to get crowding information for.\n            day: The day to get crowding information for.\n        Returns:\n            The response from the API.\n        \"\"\"\n_url = f\"crowding/{naptan_code}\"\nif day:\n_url += f\"/{day.value}\"\nreturn await self.client.get(url=_url)\n</code></pre>"},{"location":"clients/handlers/crowding_handler/#tfl.clients.handlers._crowding_handler.CrowdingHandler.get_crowding","title":"<code>get_crowding(naptan_code, day=None)</code>  <code>async</code>","text":"<p>Get information about crowding levels within TFL stations.</p> <p>Parameters:</p> Name Type Description Default <code>naptan_code</code> <code>str</code> <p>The NAPTAN code of the station to get crowding information for.</p> required <code>day</code> <code>Optional[enums.DayOfWeekEnum]</code> <p>The day to get crowding information for.</p> <code>None</code> <p>Returns:</p> Type Description <code>httpx.Response</code> <p>The response from the API.</p> Source code in <code>tfl/clients/handlers/_crowding_handler.py</code> <pre><code>async def get_crowding(self, naptan_code: str, day: Optional[enums.DayOfWeekEnum] = None) -&gt; httpx.Response:\n\"\"\"Get information about crowding levels within TFL stations.\n    Args:\n        naptan_code: The NAPTAN code of the station to get crowding information for.\n        day: The day to get crowding information for.\n    Returns:\n        The response from the API.\n    \"\"\"\n_url = f\"crowding/{naptan_code}\"\nif day:\n_url += f\"/{day.value}\"\nreturn await self.client.get(url=_url)\n</code></pre>"},{"location":"clients/handlers/lift_disruptions_handler/","title":"Lift Disruptions Handler","text":"<p>A handler to interact with the Lift Disruptions V2 API.</p>"},{"location":"clients/handlers/lift_disruptions_handler/#tfl.clients.handlers._lift_disruptions_handler.LiftDisruptionsV2Handler","title":"<code>LiftDisruptionsV2Handler</code>","text":"<p>         Bases: <code>base.TFLHandler</code></p> <p>A handler to interact with the Lift Disruptions V2 API.</p> <p>API reference</p> Example <pre><code>from tfl import clients\nasync with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\nresponse = await LiftDisruptionsV2Handler(client).get_lift_disruptions()\nprint(response.json())\n</code></pre> Source code in <code>tfl/clients/handlers/_lift_disruptions_handler.py</code> <pre><code>class LiftDisruptionsV2Handler(base.TFLHandler):\n\"\"\"A handler to interact with the Lift Disruptions V2 API.\n    [API reference](https://api-portal.tfl.gov.uk/api-details#api=Disruptions-Lifts-v2&amp;operation=get)\n    Example:\n        ```python\n        from tfl import clients\n        async with clients.TFLClient(auth=clients.Auth(key=\"&lt;your-tfl-api-key&gt;\")) as client:\n            response = await LiftDisruptionsV2Handler(client).get_lift_disruptions()\n        print(response.json())\n        ```\n    \"\"\"\nasync def get_lift_disruptions(self) -&gt; httpx.Response:\n\"\"\"Get all current lift disruptions.\n        Returns:\n            The response from the API.\n        \"\"\"\nreturn await self.client.get(url=\"Disruptions/Lifts/v2\")\n</code></pre>"},{"location":"clients/handlers/lift_disruptions_handler/#tfl.clients.handlers._lift_disruptions_handler.LiftDisruptionsV2Handler.get_lift_disruptions","title":"<code>get_lift_disruptions()</code>  <code>async</code>","text":"<p>Get all current lift disruptions.</p> <p>Returns:</p> Type Description <code>httpx.Response</code> <p>The response from the API.</p> Source code in <code>tfl/clients/handlers/_lift_disruptions_handler.py</code> <pre><code>async def get_lift_disruptions(self) -&gt; httpx.Response:\n\"\"\"Get all current lift disruptions.\n    Returns:\n        The response from the API.\n    \"\"\"\nreturn await self.client.get(url=\"Disruptions/Lifts/v2\")\n</code></pre>"}]}